<!DOCTYPE html>
<html lang="zh">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<meta http-equiv="X-UA-Compatible" content="ie=edge">
		<title>学生课程的作业列表</title>
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/buijs/lib/latest/bui.css" />
		<style>
			.job_list{
				width:96%;
				margin:0 auto;
				margin-top:0.16rem;
				background:#fff;
				border-radius: 0.12rem;
			}
			.job_list_top{
				padding:0.30rem 0.34rem;
				border-bottom: 0.01rem solid #ececec;
			}
			.job_list_top h3{
				display: inline-block;
				padding:0.04rem 0.24rem;
				background:#2F8CE5;
				font-size:0.28rem;
				border-radius: 0.10rem;
				color:#fff;
				margin-right:0.20rem;
			}
			.job_list_top h4{
				display: inline-block;
				font-size:0.32rem;
				color:#333333;
			}
			.job_list_top h6{
				font-size:0.60rem;
				color:#333333;
				float:right;
				line-height:60%;
			}
			.job_list_mid {
				padding:0.46rem 0.34rem;
				border-bottom:0.01rem solid #ececec;
			}
			.job_list_mid h3,.job_list_mid h4{
				display:inline-block;
				margin-right:0.36rem;
				font-size:0.30rem;
				color:#777777;
				margin-bottom:0.16rem;
			}
			.job_list_mid h5,.job_list_mid h6{
				font-size:0.28rem;
				color:#AEAEAE;
				margin-bottom:0.16rem;
			}
			.job_list_mid h6{
				margin-bottom:0
			}
			.job_list_bot{
				padding:0.28rem 0.34rem;
				overflow: hidden;
			}
			.job_list_bot h3{
				float:left;
				font-size:0.28rem;
				color:#FFBD4C;
				margin-top:0.10rem;
			}
			.job_list_bot h4{
				float:right;
				font-size:0.28rem;
				color:#fff;
				background: #2F8CE5;
				padding:0.10rem 0.60rem;
				border-radius: 0.50rem;
			}
			.fin h4{
				font-size:0.28rem;
				padding:0.10rem  0.50rem;
			}
			.fin h3{
				color:#ADADAD;
			}
			.overdue h3{
				color:#FB493F;
			}
			.overdue h4{
				background:#FB493F;
			}
			.completed h3{
				color:#18D571;
			}
			button {
			border: none;
			padding: 10px 20px;
			background: #2b5b3b;
			color: whitesmoke;
			font-size: 18px;
		}
		</style>
	</head>
	<body>

		<div class="bui-page">
			<!-- 固定顶部区 -->
			<header class="bui-bar" style="background: #fff;height:0.88rem">
				<div class="bui-bar-left">
					<a href="tea_course_list.html" class="bui-btn" style="color:#000"><i class="icon-back" style="color:#000"></i>返回</a>
				</div>
				<div class="bui-bar-main" style="color:#000000">作业</div>
				<a href="#" onclick="return false" class="bui-bar-right" style="width:auto;height:0.88rem;line-height:0.88rem;color:#fff">xxx</a>
			</header>
			<main>
				<button id="run">录音</button>
				<audio id="microphone"></audio>	
			</main>
			<footer>
				<ul id="tabFootNav" class="bui-nav">
					<li class="bui-btn bui-box-vertical active"><i class="icon-home"></i>
						<div class="span1">首页</div>
					</li>
					<li class="bui-btn bui-box-vertical"><i class="icon-edit"></i>
						<div class="span1">课程</div>
					</li>
					<li class="bui-btn bui-box-vertical"><i class="icon-chat"></i>
						<div class="span1">作业</div>
					</li>
					<li class="bui-btn bui-box-vertical"><i class="icon-setting"></i>
						<div class="span1">我的</div>
					</li>
				</ul>
			</footer>
		</div>
	</body>
	<script src="../js/jquery.min.js"></script>
	<script src="../js/touch.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/buijs/lib/zepto.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/buijs/lib/latest/bui.js"></script>
	<script src="../js/ctx.js"></script>
	<script src="../js/layer.js"></script>
	<script src="../js/vue.js"></script>
	<script src="../js/rem.js"></script>
	<script>
		bui.ready(function() {
			//选项卡的切换
			var uiTab = bui.tab({
				id: "#uiTab"
			});
			//底部的切换
			var tab = bui.tab({
				id: "#tabFoot",
				menu: "#tabFootNav"
			})
			$(".edit").click(function() {
				window.location.href = "./stu_course_job_complete.html";
			})
			// 	$.ajax({
			// 	type:"POST",
			// 	// url:ctx+"integralRule/getUserRuleHistoryData.action",
			// 	url:'http://127.0.0.1:8080/general/integralRule/getUserRuleHistoryData.action',
			// 	data:{
			// 		uId:loginId
			// 	},
			// 	success:function(res){
			// 		console.log(res.data);
			// 		if(res.code==0){
			// 			nowPoint = res.sumRule;
			// 			//每次进入页面的时候调取接口刷新积分.
			// 			$(".header-body").find("h3").html(nowPoint);
			// 			for(var i=0;i<res.data.length;i++){
			// 				res.data[i].createTime = format(res.data[i].createTime);
			// 			}
			// 			vm.$data.objectArray = res.data;
			// 		}
			// 	}
			// })
			// var storage = bui.storage();
			// console.log(storage);
			// var loginId = storage.get("loginId");
			// console.log(loginId)
			// bui.ajax({
			// 	type: "POST",
			// 	url: 'http://127.0.0.1:8080/general/integralRule/getUserRuleHistoryData.action',
			// 	data: {
			// 		uId: loginId
			// 	}
			// }).then(function(res) {
			// 	console.log(res)
			// }, function(res, status) {
			// 	console.log(status);
			// 	// status = "timeout" || "error" || "abort", "parsererror"
			// })
			navigator.getUserMedia || (navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);

if (!navigator.getUserMedia) {
    console.log("your browser does not have mediastream support");
}

var btn = document.getElementById('run');
console.log(btn);
btn.onclick=function(){
	navigator.getUserMedia({
	    //video: true,
	    audio: true
	}, onSuccess, onError);
}
    function onSuccess(stream) {
		debugger
        //创建一个音频环境对像
        audioContext = window.AudioContext || window.webkitAudioContext;
        context = new audioContext();

        //将声音输入这个对像
        audioInput = context.createMediaStreamSources(stream);
        console.log("将声音输入这个对像");
        //设置音量节点
        volume = context.createGain();
        audioInput.connect(volume);
        console.log("设置音量节点");
        //创建缓存，用来缓存声音
        var bufferSize = 2048;
        console.log("创建缓存，用来缓存声音");
        // 创建声音的缓存节点，createJavaScriptNode方法的
        // 第二个和第三个参数指的是输入和输出都是双声道。
        recorder = context.createJavaScriptNode(bufferSize, 2, 2);

        // 录音过程的回调函数，基本上是将左右两声道的声音
        // 分别放入缓存。
        recorder.onaudioprocess = function(e) {
            console.log('recording');
            var left = e.inputBuffer.getChannelData(0);
            var right = e.inputBuffer.getChannelData(1);
            // we clone the samples
            leftchannel.push(new Float32Array(left));
            rightchannel.push(new Float32Array(right));
            recordingLength += bufferSize;
        }

        // 将音量节点连上缓存节点，换言之，音量节点是输入
        // 和输出的中间环节。
        volume.connect(recorder);

        // 将缓存节点连上输出的目的地，可以是扩音器，也可以
        // 是音频文件。
        recorder.connect(context.destination);

    }

    function onError() {}
			
			
		})
			
	</script>
</html>
